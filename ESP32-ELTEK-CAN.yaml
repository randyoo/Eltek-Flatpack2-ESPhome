# ESP32 Eltek Flatpack2 HE CAN controller
# forked from https://github.com/taHC81/Eltek-Flatpack2-ESPhome/blob/main/ESP32-ELTEK-CAN.yaml
# info from:
# https://openinverter.org/forum/viewtopic.php?t=1351&sid=406007670a2a5d171ba325748d867cfa&start=25
# https://www.thebackshed.com/forum/ViewTopic_mobile.php?TID=12035&P=1
substitutions:
  tx_pin: GPIO1
  rx_pin: GPIO3
  name: esp32-eltek-can
  friendly_name: ESP32 Eltek Flatpack2 CAN
  device_description: "Monitor and control Eltek Flatpack2 via CAN"
  board: esp32dev
  type: arduino

esphome:
  name: ${name}
  friendly_name: ${friendly_name}

esp32:
  board: ${board}
  framework:
    type: ${type}

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

#captive_portal:

globals:
  - id: serial_number
    type: uint8_t[8]
    restore_value: no
    initial_value: '{0, 0, 0, 0, 0, 0, 0, 0}'
  - id: voltage_input
    type: int
    restore_value: no
    initial_value: '0'
  - id: voltage_output
    type: float
    restore_value: no
    initial_value: '0'
  - id: current_output
    type: float
    restore_value: no
    initial_value: '0'
  - id: temp_inlet
    type: int
    restore_value: no
    initial_value: '0'
  - id: temp_outlet
    type: int
    restore_value: no
    initial_value: '0'

canbus:
  - platform: esp32_can
    rx_pin: ${rx_pin}
    tx_pin: ${tx_pin}
    can_id: 1
    id: eltek
    use_extended_id: true
    bit_rate: 125kbps
    on_frame:
    - can_id: 0x05014400 # Serial number broadcast
      use_extended_id: true
      then:
      - lambda: |-
          for (int i = 0; i < 8; i++) {
            id(serial_number)[i] = x[i];
          }
    - can_id: 0x05014004 # Normal status update
      use_extended_id: true
      then:
      - lambda: |-
          ESP_LOGI("main", "Received CAN frame ID: 0x0501400");
          ESP_LOGI("main", "temp inlet = %d °C", x[0]);
          ESP_LOGI("main", "temp outlet = %d °C", x[7]);
          ESP_LOGI("main", "input voltage = %d V", 256*x[6]+x[5]);
          ESP_LOGI("main", "output voltage = %.2f V", (256*x[4]+x[3]) / 100.0 );
          ESP_LOGI("main", "output current = %d A", 256*x[2]+x[1] / 10.0);
          id(temp_outlet) = x[7];
          id(voltage_input) = 256 * x[6] + x[5];
          id(voltage_output) = (256 * x[4] + x[3]) / 100.0;
          id(current_output) = (256 * x[2] + x[1]) / 10.0;
          id(temp_inlet) = x[0];
          if (id(current_output) > 100) id(current_output) = 0;

interval:
  - interval: 5s
    then:
      - canbus.send: # send this "login" every time for sake of durability
          use_extended_id: true
          can_id: 0x05004804
          canbus_id: eltek
          data: !lambda |-
            ESP_LOGI("main", "sent LOGIN serial!");
            return std::vector<uint8_t>(id(serial_number), id(serial_number) + 8);

      - canbus.send: # recurring command voltage and current limit
          use_extended_id: true
          can_id: 0x05FF4004
          canbus_id: eltek
          data: !lambda |-
            uint8_t can_mesg[] = {0, 0, 0, 0, 0, 0, 0, 0};
            uint16_t eltek_i10 = id(eltek_current).state * 10;
            uint16_t eltek_u100 = id(eltek_voltage).state * 100;
            can_mesg[0] = eltek_i10 & 0xFF;
            can_mesg[1] = (eltek_i10 >> 8) & 0xFF;
            can_mesg[2] = eltek_u100 & 0xFF;
            can_mesg[3] = (eltek_u100 >> 8) & 0xFF;
            can_mesg[4] = eltek_u100 & 0xFF;
            can_mesg[5] = (eltek_u100 >> 8) & 0xFF;
            can_mesg[6] = 0x3E;
            can_mesg[7] = 0x17;
            return {can_mesg[0], can_mesg[1], can_mesg[2], can_mesg[3], can_mesg[4], can_mesg[5], can_mesg[6], can_mesg[7]};
            ESP_LOGI("main", "send can id: 0x05004804 hex: %x %x %x %x %x %x %x %x", can_mesg[0], can_mesg[1], can_mesg[2], can_mesg[3], can_mesg[4], can_mesg[5], can_mesg[6], can_mesg[7]);

sensor:
  - platform: template
    id: eltek_temp_inlet
    name: "Eltek inlet temperature"
    device_class: temperature
    unit_of_measurement: "°C"
    accuracy_decimals: 0
    update_interval: 5s
    lambda: |-
      return (id(temp_inlet));
  - platform: template
    id: eltek_temp_outlet
    name: "Eltek outlet temperature"
    device_class: temperature
    unit_of_measurement: "°C"
    accuracy_decimals: 0
    update_interval: 5s
    lambda: |-
      return (id(temp_outlet));
  - platform: template
    id: eltek_voltage_input
    name: "Eltek voltage input"
    device_class: voltage
    unit_of_measurement: "V"
    accuracy_decimals: 0
    update_interval: 5s
    lambda: |-
      return (id(voltage_input));
  - platform: template
    id: eltek_voltage_output
    name: "Eltek voltage output"
    device_class: voltage
    unit_of_measurement: "V"
    accuracy_decimals: 2
    update_interval: 5s
    lambda: |-
      return (id(voltage_output));
  - platform: template
    id: eltek_current_output
    name: "Eltek current output"
    device_class: current
    unit_of_measurement: "A"
    accuracy_decimals: 2
    update_interval: 5s
    lambda: |-
      return (id(current_output));
  - platform: template
    id: eltek_power_output
    name: "Eltek power output"
    device_class: power
    unit_of_measurement: "W"
    accuracy_decimals: 0
    update_interval: 5s
    lambda: |-
      return (id(current_output) * id(voltage_output));

number:
  - platform: template
    id: default_voltage
    name: "Default Voltage"
    device_class: voltage
    unit_of_measurement: "V"
    restore_value: true
    min_value: 43.70
    max_value: 57.60
    step: 0.1
    optimistic: true
    on_value:
      then:
        - canbus.send:
            use_extended_id: true
            can_id: 0x05004804
            canbus_id: eltek
            data: !lambda |-
              return std::vector<uint8_t>(id(serial_number), id(serial_number) + 8);
        - canbus.send:
            use_extended_id: true
            can_id: 0x05009C00
            data: !lambda |-
              ESP_LOGI("main", "Setting default voltage to %d",x);
              uint16_t voltage = (uint16_t) (x * 100); //convert the voltage to an integer and multiply by 100
              uint8_t data[5] = {0x29, 0x15, 0x00, (uint8_t) (voltage & 0xFF), (uint8_t) (voltage >> 8)}; //set the data array with the voltage in hex
              return std::vector<uint8_t>(data, data + 5); //convert the array to a vector and return it

  - platform: template
    id: eltek_voltage
    name: "Voltage"
    device_class: voltage
    unit_of_measurement: "V"
    update_interval: 5s
    restore_value: true
    min_value: 43.70
    max_value: 57.60
    step: 0.1
    optimistic: true
          
  - platform: template
    id: eltek_current
    name: "Current"
    device_class: current
    unit_of_measurement: "A"
    update_interval: 5s
    restore_value: true
    min_value: 0.10
    max_value: 41.70
    step: 0.1
    optimistic: true
 
switch:
  - platform: restart
    name: "ESPhome Eltek FP2 restart"

text_sensor:
  - platform: wifi_info
    ip_address:
      name: ESP IP Address
    ssid:
      name: ESP Connected SSID

  - platform: template
    name: "Flatpack2 temperatures"
    lambda: |-
      char buf[200];
      sprintf(buf, "%.0f°C / %.0f°C", id(eltek_temp_inlet).state, id(eltek_temp_outlet).state);
      return (std::string) buf;
    update_interval: 5s
